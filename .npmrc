# By default, pnpm creates a semistrict node_modules, meaning dependencies have access to undeclared dependencies but modules outside of node_modules do not. With this layout, most of the packages in the ecosystem work with no issues. However, if some tooling only works when the hoisted dependencies are in the root of node_modules, you can set this to true to hoist them for you.
shamefully-hoist=true

# When true, any missing non-optional peer dependencies are automatically installed.
auto-install-peers=true

# If this setting is disabled, pnpm will not fail if a different package manager is specified in the packageManager field of package.json. When enabled, only the package name is checked (since pnpm v9.2.0), so you can still run any version of pnpm regardless of the version specified in the packageManager field.
package-manager-strict=true

# When enabled, pnpm will fail if its version doesn't exactly match the version specified in the packageManager field of package.json.
package-manager-strict-version=true

# The Node.js version to use when checking a package's engines setting.
# If you want to prevent contributors of your project from adding new incompatible dependencies, use node-version and engine-strict in a .npmrc file at the root of the project:
node-version=22.8.0
engine-strict=true